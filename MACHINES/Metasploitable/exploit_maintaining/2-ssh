SSH
========================================================================================================================================
Loggin as user:user (I could use the msfadmin:msfadmin but wanna see if I can do something with the lowest leverage account)
Basic user with no privilege not even in sudoers.

Idea is to perform some privilege esclation that will make me root or something higher

with uname -a I received the output

        """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
	Linux metasploitable 2.6.24-16-server #1 SMP Thu Apr 10 13:58:00 UTC 2008 i686 GNU/Linux
	""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Let's find if there is some vulnerability in this version and hell yeah it's COW (I've already use it before Mr. firefart is back!)

Originally discovered in pokemon games is a huge vulnerability using the following logic of a trace condition:


1] I need to write on password file (we have no privilege) that beside in physical memory but 
   we don't have access when we are in user mode and need to pass through the kernel
   So for starting this attack assuming we want to copy the credentials file, it will not affect the OS until we make modification
   for a better performance

2] So as a OS should work before write something we map our neccesary space in virtual memory (let's call this private mapping "YO")
   that's the same as the credentials file    

3] Before write on physical space unless we write on YO everything remain in virtual space

4] Assume now that we want to write something on YO, for abusing the kernel-vuln we are going to write it on proc/self/mem
   (part of PROCFS a filesystem used for rappresent process in standard way held by the kernel)
   The vulnerability reside in the process-to-process virtual memory access
   Long-Story-Short we are not writing on YO but we are asking the kernel to write on YO

5] That's the key point the kernel have to guess where in physical memory is YO located so he found it and as it should be
   he create a private copy for us (that's Copy-On-Write) so now the kernel know where write things
   Before writing obv he need to locate the address memory and than write on it (the problem that they weren't 2 different atomic
   functions)

6] Everything would be ok and the write will take place BUT if we use the call MADV_DONTNEED (using mdavise) we declare to the kernel
   that we don't need that space anymore (when kernel have the address but before write on it) and he forgets of private mapping in 
   physical space is tricked to the real credentials file and write whatever was asked


That's a old school exploit but full of knowleadge physicial mem, virtual mem and calls that's why C is a powerfull weapon maker
in term of low level exploit

Also it-s really hard if not impossible to know that you were affected of dirty-cow it leaves no trace not even in the log



in practice using the officiale exploit you need to download the code and what will do is what we explain above deleting root 
and insert firefart user (lol) obv you can change user and password directly on the code.

The point is to exploit take high level privilege do what you need than restore all back to make you a shadow and no one will know :)

After uploading on the victim the script and compiled everything go smooth we just need to provide the new password and than
no more root user instead firefart and the selected password, go into the system with ssh and remember to reorganize the passwd file
with the backup one so everything will return back and you can still use firefart user until u go back

I wanna try another method for backdoor using a simple C code (C IS AWSOME) created with firefart account and than 
changing owner to root and give him the SUID permission, the C code will set uid as root when someone executed that
(privshell.c)
So after making that on the victim and set proper permission when I logg just with the simple user I can run this snippet of code
and lvl 0 user will becom lvl 99 ultra-strong-root 
=======================================================================================================================================

It worked well just a few consideration:

+ Simple host user doesn't need to write things (can be limited if needed in some circumstances)
+ Use of a backdoor like this is powerful, tricking and let attacker become root quiet...

- ...but just need to found the file and you're done in best case they just deleted, in worst case they make a honeypot for you

(Telnet is just a legacy protocol that ssh replaced so everything can be done doing the same)

