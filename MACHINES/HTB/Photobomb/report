HTB PHOTOBOMB                     10.10.11.182

22 ----- SSH

80 ----- HTTP nginx 1.18 UBUNTU

UDP

68 DHCP

Going to check an item on the website while executing an FFUF directory busting and wondering what? In the source code, I detected credentials in clear on a js script (nothing new with FFUF results)

password is b0Mb and your username is pH0t0.

It's only a gallery where you can download pictures by clicking the bottom button, and we get access to the /printer (lol funny) 
I think I can identify a method for injecting a command or a shell or something comparable with buro and also some research. Knowing that the website submitted the request to /printer once again and that many photographs with different features will be downloaded, it's likely that a sql injection succeeded.

[curious how I anticipated this study might require a lot of time, however it just took 15 minutes to collect the data; I live for all of this] 
[just used a walkthrough, but only to see how to combine multiple the script to execute with the jpeg parameter]

* file name+size is the actual file's filename. The error message is "invalid [parameter name]" when one of the parameters (picture, type, or size) is incorrect. You cannot (at least from what I've learned) inject anything into the photo or size parameter. BUT

+ "failed to produce a duplicate of [file name]" is returned when I add the text "|whoami" to the option "type." The correct technique was to put ";" and then the code separated by "+" after some waiting + trying the same thing but without the "|" can just return the file but on burp I can detect something else come up +

Well, I tested it with a basic HTTP server using curl on the victim server and Python on the attacker machine, and IT WORKED!


I need to discover a route to a shell or a reverse shell right away, so help me out!

[I found little but valuable things here that were frustrating but a gold mine for me]

Before continuing, I broke the "no need walkthrough" rule once again, but I wasn't that far ahead or even worse, I omitted a part. 
Evidently, running a SQL injection was a bad idea (shame on me!). I decided to use nc as a result, however after looking around, I believe nc is not installed.

(After doing some extra research after this "gameplay," I learned an interesting fact: obviously, most IRL servers don't have nc installed, thus it's best to practice without relying too heavily on nc.)
Don't miss the point, though. I tried using Python's reverse shell (because we are using nginx under Linux), but it didn't work. 
The injection failed because characters like "=" and ";" will be interpreted by the server as separators and indicators of equality for variables, according to some study I did on Google. 
But how can "=" and ";" be replaced? I found the proper encoding to be "%3d" and "%3b" at the location where I needed the instructions.

I'm glad to use the walkthrough for these simple but essential tasks that would otherwise only drag down the workflow.

[Re-enter the game]

We are going to the user's home directory and taking the user flag since the sell is with the basic user "wizard."

After looking around, I discovered a cronjob on "wizard" that runs the cleanup.sh script, which merely creates backups and logs of all the photos in the wizard's home directory, every five minutes. (There are two ways to check: sudo -l and crontab -l.)
The exciting part is that you can use root rights to run it without a password, therefore I believe this to be the system root owner's treasure trove. 
It will be trickier than this because we can't write inside.

I attempted to echo a nc reverse shell on the script's intended folder, but it changed the ownership. If we try to download the updated image, perhaps we can acquire a reverse shell with root (nop)

2] I can change the filetype of the infected jpeg when I use "mv," but I obviously can't run it, and neither can the root.

Re-do step 1 but with chmod 777.
OMG It only functioned with the wizard user, thus changing the owner while using chmod u+s is obviously worthless.

Even after hours, I still require the walkthrough:

If I don't understand the technique here, the script doesn't utilize the absolute path when it uses CD and FIND, hence there is a flaw we can attack called PATH TRAVERSAL.

We can benefit from CD and FIND's incorrect configuration.

A] Using the commands /tmp/cd and /tmp/find to write to the /bin/bash with echo 
B] Execute the script, but with PATH=/tmp:$PATH so that it uses the infected CD, FIND, and shell, and C] we are root (flag obtained)
What I've realized?

1] To start, stay away from the rabbit hole loop I worked quite hard to get a reverse shell utilizing cleanup's chown approach. I assume that experience would give me the ability to recognize when I'm in a good mood and when I'm not, awesome. sh script but was time wasted thus noticed no rabbit hole.

Path traversal is quite helpful even with a simple script or cronjob misconfiguration (actually can be usefull for a backdoor without attract too much attention I will try that on metasploitable2) Additionally, use ABSOLUTE PATH if you need to run a script as root for any reason unless you want an ordinary user to get root access and take over the computer. 

(I also added a cool reverse shell to the reverse shell directory that can be employed when nc doesn't support the "-e" signal; that was the only helpful thing I realized when I was lost in the rabbit hole, lol.)
